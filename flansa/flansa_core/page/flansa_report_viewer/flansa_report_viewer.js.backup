class FlansaReportViewer {
    constructor() {
        this.report_id = null;
        this.is_temp_report = false;
        this.current_report_data = null;
        this.current_view = 'table';
        this.current_page = 1;
        this.page_size = 20;
        this.search_term = '';
        this.tile_layout = 'grid'; // grid or horizontal
        this.tile_size = 'medium'; // small, medium, large
        
        this.init();
    }
    
    init() {
        console.log('Report Viewer: Initializing...');
        this.extract_url_parameters();
        this.bind_events();
        this.load_report();
    }
    
    extract_url_parameters() {
        // Extract report ID from URL path: /app/flansa-report-viewer/[report-id]
        const path = window.location.pathname;
        const pathParts = path.split('/');
        
        // URL structure: /app/flansa-report-viewer/REPORT_ID
        if (pathParts.length >= 4) {
            this.report_id = pathParts[3];
        }
        
        // Check for query parameters
        const urlParams = new URLSearchParams(window.location.search);
        this.is_temp_report = urlParams.get('temp') === '1';
        
        console.log('Report Viewer: URL parameters:', {
            report_id: this.report_id,
            is_temp_report: this.is_temp_report
        });
    }
    
    bind_events() {
        // View mode switching
        $('.view-mode-btn').on('click', (e) => {
            const view = $(e.currentTarget).data('view');
            this.switch_view(view);
        });
        
        // Search functionality
        $('#report-search').on('input', frappe.utils.debounce(() => {
            this.perform_search();
        }, 300));
        
        $('#clear-search-btn').on('click', () => {
            $('#report-search').val('');
            this.perform_search();
        });
        
        // Global keyboard navigation for tile view
        $(document).on('keydown.tile-navigation', (e) => {
            // Only handle if in tile view and no lightbox is open
            if (this.current_view === 'tile' && !$('#image-lightbox').is(':visible') && 
                (e.key === 'ArrowLeft' || e.key === 'ArrowRight')) {
                
                console.log('🎹 Keyboard navigation triggered:', e.key);
                e.preventDefault();
                
                const focusedCard = $('.gallery-card.focused').first();
                console.log('🎯 Focused card found:', focusedCard.length > 0);
                
                if (focusedCard.length > 0) {
                    console.log('🔄 Calling navigate_gallery_image from keyboard');
                    this.navigate_gallery_image(focusedCard, e.key === 'ArrowLeft' ? -1 : 1);
                } else {
                    // Focus on first card if none selected
                    const firstCard = $('.gallery-card').first();
                    console.log('🎯 Auto-focusing first card:', firstCard.length > 0);
                    if (firstCard.length > 0) {
                        firstCard.addClass('focused').focus();
                    }
                }
            }
        });
        
        // Add click to focus functionality
        $(document).on('click', '.gallery-card', function() {
            $('.gallery-card').removeClass('focused');
            $(this).addClass('focused').focus();
        });
        
        // Handle focus events for better keyboard navigation
        $(document).on('focus', '.gallery-card', function() {
            $('.gallery-card').removeClass('focused');
            $(this).addClass('focused');
        });
        
        
        // Back to reports button
        $('#back-to-reports-btn').on('click', () => {
            window.location.href = '/app/flansa-report-builder';
        });
        
        // Image gallery button in table view
        $(document).on('click', '.image-gallery-btn', (e) => {
            e.preventDefault();
            const recordIndex = $(e.currentTarget).data('record-index');
            const fieldName = $(e.currentTarget).data('field');
            this.open_image_lightbox(recordIndex, fieldName);
        });
    }
    
    async load_report() {
        if (!this.report_id) {
            this.show_error('No report ID provided in URL');
            return;
        }
        
        this.show_loading();
        
        try {
            // Load report configuration
            const response = await frappe.call({
                method: 'flansa.flansa_core.doctype.flansa_saved_report.flansa_saved_report.load_report',
                args: { report_id: this.report_id }
            });
            
            if (response.message && response.message.success) {
                const report = response.message.report;
                
                // Update page title and metadata
                this.update_page_title(report);
                
                // Add action buttons
                this.add_action_buttons(report);
                
                // Load and execute report
                await this.execute_report(report);
                
            } else {
                this.show_error(response.message?.error || 'Failed to load report');
            }
            
        } catch (error) {
            console.error('Error loading report:', error);
            this.show_error('Error loading report: ' + error.message);
        }
    }
    
    update_page_title(report) {
        $('#report-title').text(report.title);
        $('#report-subtitle').text(`Table: ${report.base_table} • Created: ${moment(report.created_on).format('MMM DD, YYYY')}`);
        
        // Update browser title
        document.title = `${report.title} - Flansa Reports`;
        
        // Update breadcrumbs with proper navigation
        frappe.breadcrumbs.clear();
        frappe.breadcrumbs.add('Flansa', '/app/flansa');
        frappe.breadcrumbs.add('Reports', '/app/flansa-report-builder');
        frappe.breadcrumbs.add(report.title);
    }
    
    add_action_buttons(report) {
        const pageActions = $('.page-actions');
        pageActions.empty();
        
        if (this.is_temp_report) {
            // Temporary report - show save button
            const saveBtn = $(`
                <button class="btn btn-primary" id="save-temp-report-btn">
                    <i class="fa fa-save"></i> Save Report
                </button>
            `);
            
            saveBtn.on('click', () => this.save_temporary_report(report));
            pageActions.append(saveBtn);
            
        } else {
            // Permanent report - show edit and share buttons
            const editBtn = $(`
                <button class="btn btn-primary" id="edit-report-btn">
                    <i class="fa fa-edit"></i> Edit Report
                </button>
            `);
            
            const shareBtn = $(`
                <button class="btn btn-default" id="share-report-btn">
                    <i class="fa fa-share-alt"></i> Share
                </button>
            `);
            
            editBtn.on('click', () => {
                window.location.href = `/app/flansa-report-builder?edit=${this.report_id}`;
            });
            
            shareBtn.on('click', () => this.share_report());
            
            pageActions.append(editBtn);
            pageActions.append(shareBtn);
        }
    }
    
    async execute_report(report) {
        try {
            const response = await frappe.call({
                method: 'flansa.flansa_core.api.report_builder_api.execute_report',
                args: {
                    report_config: {
                        base_table: report.base_table,
                        selected_fields: report.config.selected_fields || [],
                        filters: report.config.filters || [],
                        sort: report.config.sort || []
                    },
                    view_options: {
                        page: this.current_page,
                        page_size: this.page_size,
                        view_type: this.current_view,
                        search: this.search_term
                    }
                }
            });
            
            if (response.message && response.message.success) {
                this.current_report_data = response.message;
                this.current_report_config = report.config;
                this.display_results();
            } else {
                throw new Error(response.message?.error || 'Failed to execute report');
            }
            
        } catch (error) {
            console.error('Error executing report:', error);
            this.show_error('Error executing report: ' + error.message);
        }
    }
    
    display_results() {
        this.hide_loading();
        
        if (!this.current_report_data.data || this.current_report_data.data.length === 0) {
            this.show_no_results();
            return;
        }
        
        // Update record count
        $('#record-count-info').text(
            `Showing ${this.current_report_data.data.length} of ${this.current_report_data.total} records`
        );
        
        // Show content
        $('#report-content').show();
        
        // Display based on current view
        if (this.current_view === 'table') {
            this.display_table_view();
        } else if (this.current_view === 'tile') {
            this.display_tile_view();
        }
    }
    
    display_table_view() {
        const table = $('#report-table');
        const thead = table.find('thead');
        const tbody = table.find('tbody');
        
        // Clear existing content
        thead.empty();
        tbody.empty();
        
        if (!this.current_report_config.selected_fields || this.current_report_config.selected_fields.length === 0) {
            tbody.append('<tr><td colspan="100%" class="text-center text-muted">No fields configured for this report</td></tr>');
            return;
        }
        
        // Create header
        const header_row = $('<tr></tr>');
        this.current_report_config.selected_fields.forEach(field => {
            const display_label = field.custom_label || field.label;
            header_row.append(`<th>${this.escape_html(display_label)}</th>`);
        });
        thead.append(header_row);
        
        // Create rows
        this.current_report_data.data.forEach((record, recordIndex) => {
            const row = $('<tr></tr>');
            this.current_report_config.selected_fields.forEach(field => {
                const value = record[field.fieldname] || '';
                let formatted_value = this.format_field_value(value, field.fieldtype);
                
                // Check if this is an HTML-returning field type
                const isHtmlField = ['Attach Image', 'Attach', 'Link'].includes(field.fieldtype) || 
                                    field.fieldname.toLowerCase().includes('image');
                
                // Add image gallery button for image fields
                if (['Attach Image', 'Attach'].includes(field.fieldtype) || 
                    field.fieldname.toLowerCase().includes('image')) {
                    const images = this.extract_all_image_urls(value);
                    if (images.length > 0) {
                        formatted_value = `
                            <div class="table-image-cell">
                                <img src="${this.escape_html(images[0])}" alt="Image" class="table-thumbnail" style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;">
                                <button class="btn btn-sm btn-link image-gallery-btn" data-record-index="${recordIndex}" data-field="${this.escape_html(field.fieldname)}" title="View Gallery">
                                    <i class="fa fa-eye"></i> ${images.length > 1 ? '(' + images.length + ')' : ''}
                                </button>
                            </div>
                        `;
                    }
                }
                
                // Append based on whether the field contains HTML or not
                const cell = $('<td>');
                if (isHtmlField) {
                    // Don't escape HTML fields (Link, Image fields)
                    cell.html(formatted_value);
                } else {
                    // Escape non-HTML fields
                    cell.text(this.escape_html(formatted_value));
                }
                row.append(cell);
            });
            tbody.append(row);
        });
        
        $('#table-view').show();
        $('#tile-view').hide();
    }
    
    display_tile_view() {
        const tileContainer = $('#tile-container');
        tileContainer.empty();
        
        if (!this.current_report_config.selected_fields || this.current_report_config.selected_fields.length === 0) {
            tileContainer.append('<div class="text-center text-muted">No fields configured for this report</div>');
            $('#table-view').hide();
            $('#tile-view').show();
            return;
        }
        
        // Apply tile settings
        this.apply_tile_settings();
        
        // Check for image fields (but not required for tile view)
        const image_fields = this.current_report_config.selected_fields.filter(f => 
            ['Attach Image', 'Attach'].includes(f.fieldtype) || 
            f.fieldname.toLowerCase().includes('image')
        );
        
        // Create tiles for each record (with or without images)
        this.current_report_data.data.forEach(record => {
            const tileCard = this.create_tile_card(record, image_fields);
            tileContainer.append(tileCard);
        });
        
        $('#table-view').hide();
        $('#tile-view').show();
        
        // Initialize effects after tiles are rendered
        setTimeout(() => {
            try {
                // Advanced effects permanently disabled to prevent appendChild errors
                // Modern CSS-only effects will be used instead for wow factor
                console.log('Advanced JavaScript effects disabled - using CSS-only effects');
            } catch (e) {
                console.warn('Effects initialization error:', e);
            }
        }, 100);
    }
    
    initializeColorExtraction() {
        // Color extraction disabled to prevent appendChild errors
        console.log('Color extraction disabled to prevent appendChild errors');
    }
    
    initializeTiltEffect() {
        // Simplified hover effects without DOM manipulation
        console.log('Tilt effects disabled to prevent appendChild errors');
    }
    
    create_tile_card(record, image_fields) {
        // Collect all valid image URLs from image fields
        const image_urls = [];
        const image_field_info = [];
        
        if (image_fields && image_fields.length > 0) {
            image_fields.forEach(field => {
                const raw_image_value = record[field.fieldname];
                const field_image_urls = this.extract_all_image_urls(raw_image_value);
                
                field_image_urls.forEach((url, index) => {
                    if (url && url !== '/assets/frappe/images/default-avatar.png') {
                        image_urls.push(url);
                        image_field_info.push({
                            url: url,
                            field_name: field.fieldname,
                            field_label: field.label,
                            image_index: index,
                            raw_value: raw_image_value
                        });
                    }
                });
            });
        }
        
        // Find title field (first text-like field or use name)
        const title_field = this.current_report_config.selected_fields.find(f => 
            !['Attach Image', 'Attach', 'Long Text', 'Text Editor'].includes(f.fieldtype) && 
            f.fieldname !== 'name'
        );
        const title = this.truncate_text(title_field ? record[title_field.fieldname] : record.name || 'Untitled', 50);
        
        // Get non-image, non-long-text fields to display as metadata
        const metadata_fields = this.current_report_config.selected_fields.filter(f => 
            !['Attach Image', 'Attach', 'Long Text', 'Text Editor'].includes(f.fieldtype) && 
            f.fieldname !== 'name' &&
            f.fieldname !== (title_field ? title_field.fieldname : null)
        ).slice(0, 4); // Show max 4 metadata fields
        
        // Create tile card using pure DOM manipulation
        const tile_card = $('<div>')
            .addClass('gallery-card')
            .attr('data-record-name', record.name || '')
            .attr('data-index', '0')
            .attr('data-current-image', '0')
            .attr('tabindex', '0');
            
        if (image_urls.length === 0) {
            tile_card.addClass('no-image');
        }
        
        // Add image indicator and progress bar if multiple images
        if (image_urls.length > 1) {
            const imageIndicator = $('<div>').addClass('gallery-image-indicator');
            const currentImage = $('<span>').addClass('current-image').text('1');
            const totalImages = $('<span>').addClass('total-images').text(image_urls.length);
            imageIndicator.append(currentImage).append(' / ').append(totalImages);
            tile_card.append(imageIndicator);
            
            const progressBar = $('<div>').addClass('gallery-progress-bar');
            const progressFill = $('<div>').addClass('gallery-progress-fill')
                .css('width', (100/image_urls.length) + '%');
            progressBar.append(progressFill);
            tile_card.append(progressBar);
        }
        
        // Create image wrapper if images exist
        if (image_urls.length > 0) {
            const imageWrapper = $('<div>').addClass('gallery-image-wrapper');
            
            const image = $('<img>')
                .addClass('gallery-card-image')
                .attr('src', image_urls[0])
                .attr('alt', title)
                .attr('onerror', "this.src='/assets/frappe/images/default-avatar.png'");
            imageWrapper.append(image);
            
            // Add navigation controls if multiple images
            if (image_urls.length > 1) {
                const navControls = $('<div>').addClass('gallery-nav-controls');
                
                const prevBtn = $('<button>')
                    .addClass('gallery-nav-btn prev-btn')
                    .attr('title', 'Previous Image')
                    .append($('<i>').addClass('fa fa-chevron-left'));
                    
                const nextBtn = $('<button>')
                    .addClass('gallery-nav-btn next-btn')
                    .attr('title', 'Next Image')
                    .append($('<i>').addClass('fa fa-chevron-right'));
                    
                navControls.append(prevBtn).append(nextBtn);
                imageWrapper.append(navControls);
            }
            
            tile_card.append(imageWrapper);
        }
        
        // Create content section
        const content = $('<div>').addClass('gallery-card-content');
        if (image_urls.length === 0) {
            content.addClass('full-content');
        }
        
        // Add title
        const titleElement = $('<h6>').addClass('gallery-card-title').text(title);
        content.append(titleElement);
        
        // Add metadata fields
        metadata_fields.forEach(field => {
            const value = record[field.fieldname] || '';
            const maxLength = image_urls.length > 0 ? 80 : 120;
            const formatted_value = this.truncate_text(this.format_field_value(value, field.fieldtype), maxLength);
            const display_label = field.custom_label || field.label;
            
            const metaItem = $('<div>').addClass('gallery-meta-item');
            const strong = $('<strong>').text(display_label + ':');
            metaItem.append(strong).append(' ').append(document.createTextNode(formatted_value));
            content.append(metaItem);
        });
        
        tile_card.append(content);
        
        // Store image data for navigation if images exist
        if (image_urls.length > 0) {
            console.log(`🔧 Storing image data for tile card - URLs: ${image_urls.length}, Info: ${image_field_info.length}`);
            
            // Store image data directly on the tile card
            tile_card.data('images', image_field_info);
            tile_card.data('imageUrls', image_urls);
            
            // Verify data was stored
            console.log('✅ Stored data check:', {
                storedUrls: tile_card.data('imageUrls'),
                storedImages: tile_card.data('images')
            });
            
            // Bind navigation events if multiple images
            if (image_urls.length > 1) {
                console.log('🎮 Binding navigation events for', image_urls.length, 'images');
                
                tile_card.find('.prev-btn').on('click', (e) => {
                    console.log('⬅️ Previous button clicked');
                    e.stopPropagation();
                    this.navigate_gallery_image(tile_card, -1);
                });
                
                tile_card.find('.next-btn').on('click', (e) => {
                    console.log('➡️ Next button clicked');
                    e.stopPropagation();
                    this.navigate_gallery_image(tile_card, 1);
                });
            }
        }
        
        return tile_card;
    }
    
    truncate_text(text, max_length) {
        if (!text) return '';
        const str_text = String(text);
        if (str_text.length <= max_length) return str_text;
        return str_text.substring(0, max_length - 3) + '...';
    }

    escape_html(unsafe) {
        if (unsafe == null) return '';
        return String(unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    
    extract_all_image_urls(image_value) {
        console.log('🔍 extract_all_image_urls called with:', {
            value: image_value,
            type: typeof image_value,
            isArray: Array.isArray(image_value)
        });
        
        if (!image_value) return [];
        
        let processed_value = image_value;
        
        // Handle different data formats
        if (typeof image_value === 'object') {
            if (Array.isArray(image_value)) {
                const urls = [];
                image_value.forEach((item) => {
                    const url = this.get_single_image_url(item);
                    if (url && url !== '/assets/frappe/images/default-avatar.png') {
                        urls.push(url);
                    }
                });
                return urls;
            } else {
                const url = this.get_single_image_url(image_value);
                return url && url !== '/assets/frappe/images/default-avatar.png' ? [url] : [];
            }
        }
        
        // Convert to string and process
        processed_value = String(processed_value).trim();
        
        // Handle JSON strings that contain arrays
        if (processed_value.startsWith('[') && processed_value.endsWith(']')) {
            try {
                const parsed = JSON.parse(processed_value);
                if (Array.isArray(parsed)) {
                    const urls = [];
                    parsed.forEach((item) => {
                        const url = this.get_single_image_url(item);
                        if (url && url !== '/assets/frappe/images/default-avatar.png') {
                            urls.push(url);
                        }
                    });
                    return urls;
                }
            } catch (e) {
                // Failed to parse
            }
        }
        
        // Handle single image case
        const single_url = this.get_single_image_url(processed_value);
        const result = single_url && single_url !== '/assets/frappe/images/default-avatar.png' ? [single_url] : [];
        
        console.log('✅ extract_all_image_urls result:', result);
        return result;
    }
    
    get_single_image_url(image_value) {
        if (!image_value) return '/assets/frappe/images/default-avatar.png';
        
        // If it's an object, extract file_url
        if (typeof image_value === 'object') {
            return image_value.file_url || image_value.url || image_value.name || '/assets/frappe/images/default-avatar.png';
        }
        
        // Convert to string and process
        const str_value = String(image_value).trim();
        
        // Handle JSON object strings
        if (str_value.startsWith('{') && str_value.endsWith('}')) {
            try {
                const parsed = JSON.parse(str_value);
                return parsed.file_url || parsed.url || parsed.name || '/assets/frappe/images/default-avatar.png';
            } catch (e) {
                // Try regex extraction for Python-style dicts
                const fileUrlMatch = str_value.match(/'file_url':\s*'([^']+)'/);
                if (fileUrlMatch) {
                    return fileUrlMatch[1];
                }
            }
        }
        
        // Handle direct file paths
        if (str_value.startsWith('http://') || str_value.startsWith('https://')) {
            return str_value;
        } else if (str_value.startsWith('/files/')) {
            return `${window.location.origin}${str_value}`;
        } else if (str_value.startsWith('/assets/') || str_value.startsWith('/images/')) {
            return `${window.location.origin}${str_value}`;
        } else if (str_value && !str_value.includes(' ')) {
            // Assume it's a file path if it doesn't contain spaces
            return `${window.location.origin}/files/${str_value}`;
        }
        
        return '/assets/frappe/images/default-avatar.png';
    }
    
    navigate_gallery_image(gallery_card, direction) {
        console.log('🔄 navigate_gallery_image called with direction:', direction);
        console.log('🎯 gallery_card element:', gallery_card);
        
        const image_urls = gallery_card.data('imageUrls');
        const current_index = parseInt(gallery_card.data('current-image')) || 0;
        
        console.log('📊 Image navigation data:', {
            imageUrls: image_urls,
            currentIndex: current_index,
            imageCount: image_urls ? image_urls.length : 0
        });
        
        // If no images or only one image, do nothing
        if (!image_urls || image_urls.length <= 1) {
            console.log('⚠️ No navigation: insufficient images');
            return;
        }
        
        let new_index = current_index + direction;
        
        // Handle wraparound
        if (new_index < 0) {
            new_index = image_urls.length - 1;
        } else if (new_index >= image_urls.length) {
            new_index = 0;
        }
        
        // Update image with slide animation
        const img_element = gallery_card.find('.gallery-card-image');
        console.log('🖼️ Updating tile image:', {
            oldIndex: current_index,
            newIndex: new_index,
            newImageUrl: image_urls[new_index],
            imgElement: img_element.length,
            slideDirection: direction > 0 ? 'right' : 'left'
        });
        
        img_element.addClass('transitioning');
        
        // Create more pronounced slide animations with different directions
        console.log('🎬 Animation direction:', direction > 0 ? 'slide right' : 'slide left');
        const slideOutTransform = direction > 0 ? 'translateX(120%) scale(0.95)' : 'translateX(-120%) scale(0.95)';
        const slideInStart = direction > 0 ? 'translateX(-120%) scale(0.95)' : 'translateX(120%) scale(0.95)';
        
        // Slide out current image with enhanced animation
        img_element.css({
            'transform': slideOutTransform,
            'opacity': '0.3',
            'transition': 'transform 0.35s cubic-bezier(0.4, 0.0, 0.2, 1), opacity 0.35s ease-out, filter 0.35s ease-out',
            'filter': 'blur(2px)'
        });
        
        setTimeout(() => {
            // Update image source
            img_element.attr('src', image_urls[new_index]);
            gallery_card.data('current-image', new_index);
            gallery_card.attr('data-current-image', new_index);
            
            // Position new image offscreen from opposite direction
            img_element.css({
                'transform': slideInStart,
                'opacity': '0.3',
                'filter': 'blur(2px)'
            });
            
            // Slide in new image with enhanced animation
            setTimeout(() => {
                img_element.css({
                    'transform': 'translateX(0) scale(1)',
                    'opacity': '1',
                    'filter': 'blur(0)',
                    'transition': 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.4s ease-in, filter 0.4s ease-in'
                });
                
                // Clean up after animation completes
                setTimeout(() => {
                    img_element.removeClass('transitioning').css({
                        'transform': '',
                        'opacity': '',
                        'transition': '',
                        'filter': ''
                    });
                }, 400);
            }, 50);
            
            // Update indicator
            const indicator = gallery_card.find('.current-image');
            if (indicator.length > 0) {
                indicator.text(new_index + 1);
            }
            
            // Update progress bar - find it inside the gallery card itself
            const progressFill = gallery_card.find('.gallery-progress-fill');
            console.log('🔍 Progress bar update:', {
                galleryCard: gallery_card.length,
                progressFill: progressFill.length,
                newIndex: new_index,
                totalImages: image_urls.length
            });
            
            if (progressFill.length > 0) {
                const progressPercent = ((new_index + 1) / image_urls.length) * 100;
                progressFill.css({
                    'width': progressPercent + '%',
                    'transition': 'width 0.3s ease-in-out'
                });
                console.log('📊 Progress bar updated to:', progressPercent + '%');
            } else {
                console.warn('⚠️ Progress bar element not found');
            }
            
            console.log('✅ Tile image updated with slide animation');
        }, 125);
    }
    
    format_field_value(value, fieldtype) {
        if (!value) return '';
        
        switch (fieldtype) {
            case 'Date':
                return moment(value).format('MMM DD, YYYY');
            case 'Datetime':
                return moment(value).format('MMM DD, YYYY HH:mm');
            case 'Currency':
                return frappe.format(value, {fieldtype: 'Currency'});
            case 'Link':
                return `<a href="#Form/${this.escape_html(fieldtype)}/${this.escape_html(value)}">${this.escape_html(value)}</a>`;
            default:
                return value;
        }
    }
    
    cleanup_duplicate_controls() {
        console.log('🧹 Starting comprehensive duplicate control cleanup');
        
        // Nuclear approach - completely rebuild controls from scratch
        const expectedControlsHtml = `
            <div class="btn-group" role="group" style="margin-right: 10px;">
                <button type="button" class="btn btn-default btn-sm tile-layout-btn active" data-layout="grid" title="Grid Layout">
                    <i class="fa fa-th"></i>
                </button>
                <button type="button" class="btn btn-default btn-sm tile-layout-btn" data-layout="masonry" title="Masonry Layout">
                    <i class="fa fa-th-large"></i>
                </button>
                <button type="button" class="btn btn-default btn-sm tile-layout-btn" data-layout="horizontal" title="Horizontal Layout">
                    <i class="fa fa-bars"></i>
                </button>
            </div>
            
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-default btn-sm tile-size-btn" data-size="small" title="Small Tiles">
                    <i class="fa fa-compress"></i>
                </button>
                <button type="button" class="btn btn-default btn-sm tile-size-btn active" data-size="medium" title="Medium Tiles">
                    <i class="fa fa-square-o"></i>
                </button>
                <button type="button" class="btn btn-default btn-sm tile-size-btn" data-size="large" title="Large Tiles">
                    <i class="fa fa-expand"></i>
                </button>
            </div>
        `;
        
        // Clear all existing tile controls and rebuild
        $('#tile-controls').empty().append(expectedControlsHtml);
        
        console.log('🔧 Rebuilt tile controls from scratch:', {
            tileControlsContainers: $('#tile-controls').length,
            layoutButtons: $('.tile-layout-btn').length,
            sizeButtons: $('.tile-size-btn').length
        });
    }
    
    bind_tile_controls() {
        // Clean event binding - unbind any existing handlers first
        $('.tile-layout-btn').off('click.tile-controls');
        $('.tile-size-btn').off('click.tile-controls');
        
        // Bind tile layout controls
        $('.tile-layout-btn').on('click.tile-controls', (e) => {
            const layout = $(e.currentTarget).data('layout');
            this.change_tile_layout(layout);
        });
        
        // Bind tile size controls
        $('.tile-size-btn').on('click.tile-controls', (e) => {
            const size = $(e.currentTarget).data('size');
            this.change_tile_size(size);
        });
        
        console.log('✅ Tile controls bound successfully:', {
            layoutButtons: $('.tile-layout-btn').length,
            sizeButtons: $('.tile-size-btn').length
        });
    }
    
    switch_view(view) {
        this.current_view = view;
        
        // Update button states
        $('.view-mode-btn').removeClass('active');
        $(`.view-mode-btn[data-view="${view}"]`).addClass('active');
        
        // Show/hide tile controls
        if (view === 'tile') {
            console.log('🎯 Switching to tile view, running cleanup...');
            // More aggressive duplicate cleanup
            this.cleanup_duplicate_controls();
            $('#tile-controls').show();
            // Ensure tile controls are properly bound (prevent duplicates)
            this.bind_tile_controls();
            // Initialize tile container classes
            this.apply_tile_settings();
        } else {
            $('#tile-controls').hide();
        }
        
        // Display based on view
        this.display_results();
    }
    
    apply_tile_settings() {
        const container = $('#tile-container');
        container.removeClass('layout-grid layout-horizontal size-small size-medium size-large');
        container.addClass(`layout-${this.tile_layout} size-${this.tile_size}`);
    }
    
    change_tile_layout(layout) {
        this.tile_layout = layout;
        
        // Update button states
        $('.tile-layout-btn').removeClass('active');
        $(`.tile-layout-btn[data-layout="${layout}"]`).addClass('active');
        
        // Apply settings and re-display if in tile view
        if (this.current_view === 'tile') {
            this.apply_tile_settings();
        }
    }
    
    change_tile_size(size) {
        this.tile_size = size;
        
        // Update button states
        $('.tile-size-btn').removeClass('active');
        $(`.tile-size-btn[data-size="${size}"]`).addClass('active');
        
        // Apply settings and re-display if in tile view
        if (this.current_view === 'tile') {
            this.apply_tile_settings();
        }
    }
    
    async perform_search() {
        this.search_term = $('#report-search').val();
        this.current_page = 1; // Reset to first page
        
        // Re-execute report with search
        if (this.current_report_data) {
            await this.execute_report({
                base_table: this.current_report_config.base_table,
                config: this.current_report_config
            });
        }
    }
    
    show_loading() {
        $('#report-loading').show();
        $('#report-content, #report-error').hide();
    }
    
    hide_loading() {
        $('#report-loading').hide();
    }
    
    show_error(message) {
        $('#error-message').text(message);
        $('#report-error').show();
        $('#report-loading, #report-content').hide();
    }
    
    show_no_results() {
        $('#no-results').show();
        $('#table-view, #gallery-view').hide();
        $('#report-content').show();
    }
    
    async save_temporary_report(report) {
        const d = new frappe.ui.Dialog({
            title: 'Save Report',
            fields: [
                {
                    fieldname: 'report_title',
                    fieldtype: 'Data',
                    label: 'Report Title',
                    reqd: 1,
                    default: report.title.replace(/^Temp Report - /, '').replace(/ - \d+:\d+:\d+.*$/, ''),
                    description: 'Give your report a permanent name'
                },
                {
                    fieldname: 'description',
                    fieldtype: 'Small Text',
                    label: 'Description',
                    description: 'Optional description of what this report shows'
                },
                {
                    fieldname: 'is_public',
                    fieldtype: 'Check',
                    label: 'Make Public',
                    description: 'Allow other users to view and use this report'
                }
            ],
            primary_action_label: 'Save Report',
            primary_action: async (values) => {
                try {
                    const response = await frappe.call({
                        method: 'frappe.client.set_value',
                        args: {
                            doctype: 'Flansa Saved Report',
                            name: this.report_id,
                            fieldname: {
                                'report_title': values.report_title,
                                'description': values.description || '',
                                'is_public': values.is_public ? 1 : 0
                            }
                        }
                    });
                    
                    if (!response.exc) {
                        frappe.show_alert(`Report "${values.report_title}" saved successfully!`, 'green');
                        d.hide();
                        
                        // Redirect to permanent report URL
                        window.location.href = `/app/flansa-report-viewer/${this.report_id}`;
                    } else {
                        frappe.msgprint('Failed to save report');
                    }
                } catch (error) {
                    frappe.msgprint('Error saving report: ' + error.message);
                }
            }
        });
        
        d.show();
    }
    
    share_report() {
        const currentUrl = window.location.href;
        
        // Copy to clipboard
        if (navigator.clipboard) {
            navigator.clipboard.writeText(currentUrl).then(() => {
                frappe.show_alert({
                    message: 'Report URL copied to clipboard!',
                    indicator: 'green'
                });
            });
        } else {
            // Fallback for older browsers
            const temp = document.createElement('textarea');
            temp.value = currentUrl;
            document.body.appendChild(temp);
            temp.select();
            document.execCommand('copy');
            document.body.removeChild(temp);
            
            frappe.show_alert({
                message: 'Report URL copied to clipboard!',
                indicator: 'green'
            });
        }
    }
    
    open_image_lightbox(recordIndex, fieldName) {
        console.log('🖼️ Opening lightbox for record:', recordIndex, 'field:', fieldName);
        
        const record = this.current_report_data.data[recordIndex];
        const value = record[fieldName];
        
        console.log('🔍 Record data:', {
            record: record,
            fieldValue: value,
            valueType: typeof value
        });
        
        const images = this.extract_all_image_urls(value);
        
        console.log('📸 Extracted images for lightbox:', {
            recordName: record.name,
            imageCount: images.length,
            images: images,
            fieldName: fieldName,
            rawFieldValue: value
        });
        
        if (images.length === 0) {
            frappe.msgprint('No images found');
            return;
        }
        
        // Create lightbox modal
        const hasMultipleImages = images.length > 1;
        console.log('🔧 Creating lightbox HTML with', images.length, 'images, navigation buttons:', hasMultipleImages);
        
        let lightboxNavButtons = '';
        if (hasMultipleImages) {
            lightboxNavButtons = `
                <button class="lightbox-nav lightbox-prev" title="Previous (←)">
                    <i class="fa fa-chevron-left"></i>
                </button>
                <button class="lightbox-nav lightbox-next" title="Next (→)">
                    <i class="fa fa-chevron-right"></i>
                </button>`;
        }
        
        const lightboxHtml = `
            <div class="image-lightbox-overlay" id="image-lightbox">
                <div class="lightbox-content">
                    <div class="lightbox-header">
                        <span class="lightbox-title">${this.escape_html(record.name || 'Image Gallery')}</span>
                        <span class="lightbox-counter">
                            <span class="current-img">1</span> / <span class="total-imgs">${images.length}</span>
                        </span>
                        <button class="lightbox-close" title="Close (Esc)">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                    <div class="lightbox-body">
                        <div class="lightbox-image-container">
                            <img src="" alt="Image" class="lightbox-image" id="lightbox-img">
                            ${lightboxNavButtons}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        console.log('📝 Generated lightbox HTML contains navigation buttons:', lightboxHtml.includes('lightbox-prev'));
        
        // Remove any existing lightbox first to prevent duplicates
        $('#image-lightbox').remove();
        
        // Add to DOM
        $('body').append(lightboxHtml);
        
        // Store current state
        this.lightbox_images = images;
        this.lightbox_current_index = 0;
        
        console.log('💾 Lightbox state stored:', {
            lightboxImages: this.lightbox_images,
            currentIndex: this.lightbox_current_index
        });
        
        // Bind events
        this.bind_lightbox_events();
        
        // Show lightbox and load first image
        $('#image-lightbox').fadeIn(200, () => {
            // Load first image after lightbox is shown
            $('#lightbox-img').attr('src', images[0]);
            console.log('🖼️ First image loaded in lightbox:', images[0]);
        });
    }
    
    bind_lightbox_events() {
        const lightbox = $('#image-lightbox');
        
        // Close events
        lightbox.find('.lightbox-close').on('click', () => this.close_lightbox());
        
        // Click outside image to close (enhanced)
        lightbox.on('click', (e) => {
            // Close if clicking on overlay background or lightbox body (but not image or nav buttons)
            const clickedElement = $(e.target);
            const isOverlay = e.target === lightbox[0];
            const isLightboxBody = clickedElement.hasClass('lightbox-body');
            const isImageContainer = clickedElement.hasClass('lightbox-image-container');
            const isNavButton = clickedElement.closest('.lightbox-nav').length > 0;
            const isImage = clickedElement.hasClass('lightbox-image');
            
            if ((isOverlay || isLightboxBody || isImageContainer) && !isNavButton && !isImage) {
                console.log('🖱️ Clicked outside image, closing lightbox');
                this.close_lightbox();
            }
        });
        
        // Navigation events
        lightbox.find('.lightbox-prev').on('click', () => {
            console.log('⬅️ Lightbox previous button clicked');
            this.navigate_lightbox(1);
        });
        lightbox.find('.lightbox-next').on('click', () => {
            console.log('➡️ Lightbox next button clicked');
            this.navigate_lightbox(-1);
        });
        
        console.log('🎮 Lightbox navigation buttons bound:', {
            prevButton: lightbox.find('.lightbox-prev').length,
            nextButton: lightbox.find('.lightbox-next').length
        });
        
        // Keyboard events with higher priority
        $(document).off('keydown.lightbox').on('keydown.lightbox', (e) => {
            // Stop tile navigation when lightbox is open
            e.stopImmediatePropagation();
            
            switch(e.key) {
                case 'Escape':
                    this.close_lightbox();
                    break;
                case 'ArrowLeft':
                    e.preventDefault();
                    this.navigate_lightbox(-1);
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    this.navigate_lightbox(1);
                    break;
            }
        });
        
        // Mouse wheel navigation
        lightbox.on('wheel', (e) => {
            e.preventDefault();
            if (e.originalEvent.deltaY > 0) {
                this.navigate_lightbox(1);
            } else {
                this.navigate_lightbox(-1);
            }
        });
    }
    
    navigate_lightbox(direction) {
        // Prevent multiple rapid navigations
        if (this.lightbox_navigating) {
            console.log('⚠️ Navigation already in progress, skipping');
            return;
        }
        
        console.log('🎬 Lightbox navigation called:', {
            direction: direction,
            currentIndex: this.lightbox_current_index,
            totalImages: this.lightbox_images ? this.lightbox_images.length : 0,
            images: this.lightbox_images
        });
        
        if (!this.lightbox_images || this.lightbox_images.length <= 1) {
            console.log('⚠️ Lightbox navigation stopped - insufficient images');
            return;
        }
        
        this.lightbox_navigating = true;
        
        let newIndex = this.lightbox_current_index + direction;
        
        // Handle wraparound
        if (newIndex < 0) {
            newIndex = this.lightbox_images.length - 1;
        } else if (newIndex >= this.lightbox_images.length) {
            newIndex = 0;
        }
        
        this.lightbox_current_index = newIndex;
        
        console.log('🖼️ Updating lightbox display:', {
            newIndex: newIndex,
            newImageUrl: this.lightbox_images[newIndex],
            imgElementFound: $('#lightbox-img').length,
            counterElementFound: $('.current-img').length
        });
        
        // Update image with fade effect and cache clearing
        const img = $('#lightbox-img');
        console.log('🎯 DOM element check:', {
            imgElement: img.length,
            imgCurrentSrc: img.attr('src'),
            imgVisible: img.is(':visible'),
            lightboxVisible: $('#image-lightbox').is(':visible'),
            lightboxCount: $('#image-lightbox').length
        });
        
        if (img.length === 0) {
            console.error('❌ Lightbox image element not found!');
            return;
        }
        
        // Stop any ongoing animations first to prevent multiple callbacks
        img.stop(true, true);
        
        img.fadeOut(100, () => {
            console.log('💫 Image faded out, updating src to:', this.lightbox_images[newIndex]);
            // Clear src first to prevent caching issues
            img.attr('src', '');
            // Set new source with a slight delay to ensure clearing
            setTimeout(() => {
                img.attr('src', this.lightbox_images[newIndex]);
                console.log('✅ New image src set, fading in. Current src:', img.attr('src'));
                img.fadeIn(100, () => {
                    // Reset navigation flag after fade in completes
                    this.lightbox_navigating = false;
                });
            }, 10);
        });
        
        // Update counter - target only the lightbox counter, not all current-img elements
        const counterElement = $('#image-lightbox .current-img');
        console.log('🧮 Counter element check:', {
            counterElements: counterElement.length,
            currentText: counterElement.text(),
            newValue: newIndex + 1
        });
        
        if (counterElement.length === 0) {
            console.error('❌ Lightbox counter element not found!');
        } else {
            counterElement.text(newIndex + 1);
            console.log('🔢 Counter updated to:', newIndex + 1, 'Actual text now:', counterElement.text());
        }
    }
    
    close_lightbox() {
        $('#image-lightbox').fadeOut(200, () => {
            $('#image-lightbox').remove();
        });
        
        // Clean up event handlers
        $(document).off('keydown.lightbox');
        
        // Clean up state
        this.lightbox_images = null;
        this.lightbox_current_index = 0;
        
        // Re-enable tile navigation
        if (this.current_view === 'tile') {
            // Restore focus to previously focused card if any
            const focusedCard = $('.gallery-card.focused').first();
            if (focusedCard.length > 0) {
                focusedCard.focus();
            }
        }
    }
}

// Initialize the Report Viewer when page loads
frappe.pages['flansa-report-viewer'].on_page_load = function(wrapper) {
    var page = frappe.ui.make_app_page({
        parent: wrapper,
        title: 'Report Viewer',
        single_column: true
    });
    
    // Load the HTML template
    $(page.body).html(frappe.render_template('flansa_report_viewer'));
    
    // Initialize the viewer
    window.report_viewer = new FlansaReportViewer();
};

frappe.pages['flansa-report-viewer'].on_page_show = function(wrapper) {
    console.log('=== REPORT VIEWER PAGE SHOW ===');
    
    // Re-initialize if needed or refresh data
    if (window.report_viewer) {
        window.report_viewer.init();
    }
};

console.log("Flansa Report Viewer JavaScript loaded successfully!");